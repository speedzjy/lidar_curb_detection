#!/usr/bin/env python
# encoding: utf-8
#| Copyright Inria May 2015
#| This project has received funding from the European Research Council (ERC) under
#| the European Union's Horizon 2020 research and innovation programme (grant
#| agreement No 637972) - see http://www.resibots.eu
#|
#| Contributor(s):
#|   - Jean-Baptiste Mouret (jean-baptiste.mouret@inria.fr)
#|   - Antoine Cully (antoinecully@gmail.com)
#|   - Konstantinos Chatzilygeroudis (konstantinos.chatzilygeroudis@inria.fr)
#|   - Federico Allocati (fede.allocati@gmail.com)
#|   - Vaios Papaspyros (b.papaspyros@gmail.com)
#|   - Roberto Rama (bertoski@gmail.com)
#|
#| This software is a computer library whose purpose is to optimize continuous,
#| black-box functions. It mainly implements Gaussian processes and Bayesian
#| optimization.
#| Main repository: http://github.com/resibots/limbo
#| Documentation: http://www.resibots.eu/limbo
#|
#| This software is governed by the CeCILL-C license under French law and
#| abiding by the rules of distribution of free software.  You can  use,
#| modify and/ or redistribute the software under the terms of the CeCILL-C
#| license as circulated by CEA, CNRS and INRIA at the following URL
#| "http://www.cecill.info".
#|
#| As a counterpart to the access to the source code and  rights to copy,
#| modify and redistribute granted by the license, users are provided only
#| with a limited warranty  and the software's author,  the holder of the
#| economic rights,  and the successive licensors  have only  limited
#| liability.
#|
#| In this respect, the user's attention is drawn to the risks associated
#| with loading,  using,  modifying and/or developing or reproducing the
#| software by the user in light of its specific status of free software,
#| that may mean  that it is complicated to manipulate,  and  that  also
#| therefore means  that it is reserved for developers  and  experienced
#| professionals having in-depth computer knowledge. Users are therefore
#| encouraged to load and test the software's suitability as regards their
#| requirements in conditions enabling the security of their systems and/or
#| data to be ensured and,  more generally, to use and operate it in the
#| same conditions as regards security.
#|
#| The fact that you are presently reading this means that you have had
#| knowledge of the CeCILL-C license and that you accept its terms.
#|

import create_all_combinations_test


def build(bld):
    bld.program(features = 'cxx',
                source = 'bo_functions.cpp',
                includes = '. .. ../../',
                target = 'bo_functions',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_gp.cpp',
                includes = '. .. ../../',
                target = 'test_gp',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_kernel.cpp',
                includes = '. .. ../../',
                target = 'test_kernel',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_mean.cpp',
                includes = '. .. ../../',
                target = 'test_mean',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_init_functions.cpp',
                includes = '. .. ../../',
                target = 'test_init_functions',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_optimizers.cpp',
                includes = '. .. ../../',
                target = 'test_optimizers',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_macros.cpp',
                includes = '. .. ../../',
                target = 'test_macros',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    bld.program(features = 'cxx test',
                source = 'test_serialize.cpp',
                includes = '. .. ../../',
                target = 'test_serialize',
                uselib = bld.env.LIBRARIES,
                use = 'limbo')
    if bld.env.DEFINES_NLOPT or bld.env.DEFINES_LIBCMAES:
        bld.program(features = 'cxx test',
                    source = 'test_boptimizer.cpp',
                    includes = '. .. ../../',
                    target = 'test_boptimizer',
                    uselib = bld.env.LIBRARIES,
                    use = 'limbo')
    if bld.env.DEFINES_NLOPT:
        bld.program(features = 'cxx test',
                    source = 'test_nlopt.cpp',
                    includes = '. .. ../../',
                    target = 'test_nlopt',
                    uselib = bld.env.LIBRARIES,
                    use = 'limbo')
    if bld.env.DEFINES_LIBCMAES:
        bld.program(features='cxx test',
                    source='test_cmaes.cpp',
                    includes='. .. ../../',
                    target='test_cmaes',
                    uselib=bld.env.LIBRARIES,
                    use='limbo')


def build_extensive_tests(ctx):
    create_all_combinations_test.create(ctx)
